package igu;
import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;

import java.awt.CardLayout;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.TableRowSorter;

import logica.*;

import javax.swing.SwingConstants;

import java.awt.FlowLayout;
import java.awt.Font;

import javax.swing.JTextArea;
import javax.swing.JTable;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Main extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JPanel panel_Pestañas;
	private JPanel panel_Informacion;
	private JLabel lb_Información;
	private JPanel panel_Seleccionar_Pedidos;
	private JPanel panel_Seleccionar_Productos;
	private JScrollPane panel_Scroll_Pedidos;
	private JButton bt_Continuar;
	private JPanel panel_Botones_Pedidos;
	private JPanel panel_Botones_Productos;
	private JButton bt_Continuar_Productos;
	private JButton bt_Atras_Productos;

	private DefaultListModel<Producto> modeloListaProductos = new DefaultListModel<Producto>();
	private DefaultListModel<Pedido> modeloListaPedidos = new DefaultListModel<Pedido>();
	private JPanel panel_Informacion_Productos;
	private JPanel panel_Datos;
	private JPanel panel_Avanzar;
	private JPanel panel;
	private JButton btSiguiente;
	private JButton btAtras;
	private JPanel panel_1;
	private JButton button_2;
	private JLabel lbNombreInf;
	private JPanel panel_2;
	private JButton btRecogido;
	private JScrollPane scrollPane;
	private JPanel panel_3;
	private JLabel lbIDPed;
	private JLabel lbIDPedInf;
	private JLabel lbCodigo;
	private JLabel lbCodigoInf;
	private JLabel lbPasillo;
	private JLabel lbPasilloInf;
	private JLabel lbEstanteria;
	private JLabel lbEstanteriaInf;
	private JLabel lbAltura;
	private JLabel lbAlturaInf;
	private JLabel lbDimensiones;
	private JLabel lbDimensionesInf;
	private JLabel lbPeso;
	private JLabel lbPesoInf;
	
	private List<Producto> listaProductosSeleccionados;
	private int productoSeleccionado = 0;
	private JLabel lbNombreProducto;
	private JLabel lbNombreProductoInf;
	private JPanel panel_Ampliar_Fragmentar;
	private JPanel panel_botones_Frag_Ampl;
	private JButton bt_Si;
	private JButton bt_No;
	private JPanel panel_Mensaje_Frag_Ampl;
	private JScrollPane panelScroll_Mensaje_Ampl_Frag;
	private JTextArea txArea_Mensaje_Frag_Ampl;
	private double pesoTotalPedSeleccionados = 0;
	private JButton btnSeleccionarTodo;
	private JTable tabla_Pedidos;
	private ModeloNoEditable modeloTabla;
	protected JList<Producto> list_Pedidos;
	private TableRowSorter<ModeloNoEditable> modeloOrdenado;
	private JScrollPane panel_scroll_Productos;
	private JTable tabla_productos;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public Main() {
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 300, 350);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(5, 5));
		setContentPane(contentPane);
		contentPane.add(getPanel_Informacion(), BorderLayout.NORTH);
		contentPane.add(getPanel_Pestañas(), BorderLayout.CENTER);

		//cargarPruebas();
		cargarDatosPedidos();
	}
	private JPanel getPanel_Pestañas() {
		if (panel_Pestañas == null) {
			panel_Pestañas = new JPanel();
			panel_Pestañas.setLayout(new CardLayout(5, 5));
			panel_Pestañas.add(getPanel_Seleccionar_Pedidos(), "Pedidos");
			panel_Pestañas.add(getPanel_Ampliar_Fragmentar(), "Fragmentar_Ampliar");
			panel_Pestañas.add(getPanel_Seleccionar_Productos(), "Productos");
			panel_Pestañas.add(getPanel_Informacion_Productos(), "Informacion");
		}
		return panel_Pestañas;
	}
	private JPanel getPanel_Informacion() {
		if (panel_Informacion == null) {
			panel_Informacion = new JPanel();
			panel_Informacion.setLayout(new BorderLayout(0, 0));
			panel_Informacion.add(getLb_Información());
		}
		return panel_Informacion;
	}
	private JLabel getLb_Información() {
		if (lb_Información == null) {
			lb_Información = new JLabel("Selecciona los pedidos que deseas recoger");
		}
		return lb_Información;
	}
	private JPanel getPanel_Seleccionar_Pedidos() {
		if (panel_Seleccionar_Pedidos == null) {
			panel_Seleccionar_Pedidos = new JPanel();
			panel_Seleccionar_Pedidos.setLayout(new BorderLayout(0, 0));
			panel_Seleccionar_Pedidos.add(getPanel_Scroll_Pedidos(), BorderLayout.CENTER);
			panel_Seleccionar_Pedidos.add(getPanel_Botones_Pedidos(), BorderLayout.SOUTH);
		}
		return panel_Seleccionar_Pedidos;
	}
	private JPanel getPanel_Seleccionar_Productos() {
		if (panel_Seleccionar_Productos == null) {
			panel_Seleccionar_Productos = new JPanel();
			panel_Seleccionar_Productos.setLayout(new BorderLayout(0, 0));
			panel_Seleccionar_Productos.add(getPanel_Botones_Productos(), BorderLayout.SOUTH);
			panel_Seleccionar_Productos.add(getPanel_scroll_Productos(), BorderLayout.CENTER);
		}
		return panel_Seleccionar_Productos;
	}
	private JScrollPane getPanel_Scroll_Pedidos() {
		if (panel_Scroll_Pedidos == null) {
			panel_Scroll_Pedidos = new JScrollPane();
			panel_Scroll_Pedidos.setViewportView(getTabla_Pedidos());
		}
		return panel_Scroll_Pedidos;
	}
	private JButton getBt_Continuar() {
		if (bt_Continuar == null) {
			bt_Continuar = new JButton("Continuar");
			bt_Continuar.setEnabled(false);
			bt_Continuar.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					modeloListaProductos.clear();
					int[] seleccionados = list_Pedidos.getSelectedIndices();
					
					ArrayList<Producto> listaProductos = null;
					double pesoTotal = 0;
					for(int i=0; i<seleccionados.length;i++){
						listaProductos = modeloListaPedidos.get(seleccionados[i]).getProductos();
						for(int j=0; j<listaProductos.size();j++){
							modeloListaProductos.addElement(listaProductos.get(j));
							if(listaProductos.get(j).getEstado_producto() == Producto.POR_RECOGER)
								pesoTotal= pesoTotal + listaProductos.get(j).getPeso();
						}
					}
					if(pesoTotal <= Producto.PESO_GRANDE && pesoTotal >= Producto.PESO_PEQUEÑO)
					{
						((CardLayout)panel_Pestañas.getLayout()).show(panel_Pestañas, "Productos");
						
						lb_Información.setText("Selecciona los productos que deseas recoger");
						
					
					}
					if(pesoTotal > Producto.PESO_GRANDE)
					{
						((CardLayout)panel_Pestañas.getLayout()).show(panel_Pestañas, "Fragmentar_Ampliar");
						
						lb_Información.setText("Selecciona la opción que desees");
						
						
						txArea_Mensaje_Frag_Ampl.setText("El/Los pedidos seleccionados son muy grandes "
								+ "¿Deseas que el sistema te seleccione solo los más pequeños?");
					}
					if(pesoTotal < Producto.PESO_PEQUEÑO)
					{
						((CardLayout)panel_Pestañas.getLayout()).show(panel_Pestañas, "Fragmentar_Ampliar");
						
						lb_Información.setText("Selecciona la opción que desees");
						
						
						txArea_Mensaje_Frag_Ampl.setText("El/Los pedidos seleccionados son muy pequeños "
								+ "¿Deseas que el sistema te seleccione otros productos de otros pedidos para ahorrar tiempo?");
					}
					pesoTotalPedSeleccionados = pesoTotal;
				}
			});
		}
		return bt_Continuar;
	}
	private JPanel getPanel_Botones_Pedidos() {
		if (panel_Botones_Pedidos == null) {
			panel_Botones_Pedidos = new JPanel();
			panel_Botones_Pedidos.add(getBt_Continuar());
		}
		return panel_Botones_Pedidos;
	}
	private JPanel getPanel_Botones_Productos() {
		if (panel_Botones_Productos == null) {
			panel_Botones_Productos = new JPanel();
			panel_Botones_Productos.setLayout(new GridLayout(0, 3, 0, 0));
			panel_Botones_Productos.add(getBt_Continuar_Productos());
			panel_Botones_Productos.add(getBt_Atras_Productos());
			panel_Botones_Productos.add(getBtnSeleccionarTodo());
		}
		return panel_Botones_Productos;
	}
	private JButton getBt_Continuar_Productos() {
		if (bt_Continuar_Productos == null) {
			bt_Continuar_Productos = new JButton("Continuar");
			bt_Continuar_Productos.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					
					ArrayList<Producto> productosSeleccionados = new ArrayList<Producto>();
					int[] seleccionados = list_Productos.getSelectedIndices();
					
					for(int i=0; i<seleccionados.length;i++){
						productosSeleccionados.add(modeloListaProductos.get(seleccionados[i]));
					}
					
					listaProductosSeleccionados = productosSeleccionados;
					Collections.sort(listaProductosSeleccionados);
					cargarInformacionProducto();
					cargarBotones();
					
					((CardLayout)panel_Pestañas.getLayout()).show(panel_Pestañas, "Informacion");
					lb_Información.setText("Recoge en el almacén los siguientes productos");
					
					
				}
			});
			bt_Continuar_Productos.setEnabled(false);
		}
		return bt_Continuar_Productos;
	}
	private JButton getBt_Atras_Productos() {
		if (bt_Atras_Productos == null) {
			bt_Atras_Productos = new JButton("Atras");
			bt_Atras_Productos.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					
					
					((CardLayout)panel_Pestañas.getLayout()).show(panel_Pestañas, "Pedidos");
					lb_Información.setText("Selecciona los pedidos que deseas recoger");
					
					
				}
			});
		}
		return bt_Atras_Productos;
	}
	
	public void MarcarDatoLista(Producto p)
	{
		ArrayList<Producto> productos = new ArrayList<Producto>();
		
		for(int i=0; i<modeloListaProductos.size();i++){
			productos.add(modeloListaProductos.get(i));
		}
		
		modeloListaProductos.clear();
		
		for(int i=0; i<productos.size();i++){
			if(productos.get(i).equals(p))
				productos.get(i).setEstado_producto(Producto.RECOGIDO);
			modeloListaProductos.addElement(productos.get(i));
		}
		
		modeloListaProductos.get(modeloListaProductos.indexOf(p)).setEstado_producto(Producto.RECOGIDO);
	}
	
	
	/*
	public void abrirJDialog()
	{
		ArrayList<Producto> productosSeleccionados = new ArrayList<Producto>();
		int[] seleccionados = list_Productos.getSelectedIndices();
		
		for(int i=0; i<seleccionados.length;i++){
			productosSeleccionados.add(modeloListaProductos.get(seleccionados[i]));
		}
		
		JDialog ventanaSecundaria = new InformacionProducto(this, productosSeleccionados);
		ventanaSecundaria.setVisible(true);
	}*/
	
	/*
	public void cargarPruebas()
	{
		
		Random r = new Random();
		int valorPasillo = r.nextInt(6)+1;
		int valorEstanteria = r.nextInt(3)+1;
		int valorAltura = r.nextInt(3)+1;
		
		for(int i = 0; i<r.nextInt(10)+1; i++)
		{
			Pedido p = new Pedido();
			p.setId(i);
			for(int j = 0; j<r.nextInt(10)+1; j++)
			{
				p.añadirProducto(new Producto(i, "Prod: "+j, 
						(""+ valorPasillo +"-"+valorEstanteria+"-"+valorAltura),
						"AAA", r.nextInt(5)+1, r.nextInt(5)+1, r.nextInt(5)+1, r.nextInt(10)+1,Producto.POR_RECOGER));
			}
			modeloListaPedidos.addElement(p);
		}
	}
	*/
	
	public void cargarDatosPedidos()
	{
		Gestor g = new Gestor();
		g.generaPedidos();
		ArrayList<Pedido> a = g.getPedidos();
		for(Pedido p : a)
			modeloListaPedidos.addElement(p);
		añadirDatosTablaPedidos();
	}
	public void cargarDatosProductos(int pedido)
	{
		Gestor g = new Gestor();
		g.generaPedidos();
		ArrayList<Producto> a = g.getPedidos().get(pedido).getProductos();
		for(Producto p : a)
			modeloListaProductos.addElement(p);
		añadirDatosTablaProductos();
	}
	
	
	private JPanel getPanel_Informacion_Productos() {
		if (panel_Informacion_Productos == null) {
			panel_Informacion_Productos = new JPanel();
			panel_Informacion_Productos.setLayout(new BorderLayout(0, 0));
			panel_Informacion_Productos.add(getPanel_Datos(), BorderLayout.CENTER);
			panel_Informacion_Productos.add(getPanel_Avanzar(), BorderLayout.SOUTH);
		}
		return panel_Informacion_Productos;
	}
	private JPanel getPanel_Datos() {
		if (panel_Datos == null) {
			panel_Datos = new JPanel();
			panel_Datos.setLayout(new BorderLayout(0, 0));
			panel_Datos.add(getLbNombreInf(), BorderLayout.NORTH);
			panel_Datos.add(getPanel_2(), BorderLayout.SOUTH);
			panel_Datos.add(getScrollPane(), BorderLayout.CENTER);
		}
		return panel_Datos;
	}
	private JPanel getPanel_Avanzar() {
		if (panel_Avanzar == null) {
			panel_Avanzar = new JPanel();
			panel_Avanzar.setLayout(new BorderLayout(0, 0));
			panel_Avanzar.add(getPanel(), BorderLayout.NORTH);
			panel_Avanzar.add(getPanel_1(), BorderLayout.SOUTH);
		}
		return panel_Avanzar;
	}
	private JPanel getPanel() {
		if (panel == null) {
			panel = new JPanel();
			panel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 0));
			panel.add(getBtSiguiente());
			panel.add(getBtAtras());
		}
		return panel;
	}
	private JButton getBtSiguiente() {
		if (btSiguiente == null) {
			btSiguiente = new JButton("Siguiente");
			btSiguiente.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					if(productoSeleccionado<listaProductosSeleccionados.size()-1)
					{
						productoSeleccionado++;
					}
					cargarInformacionProducto();
					
					cargarBotones();
				}
			});
			btSiguiente.setEnabled(true);
		}
		return btSiguiente;
	}
	private JButton getBtAtras() {
		if (btAtras == null) {
			btAtras = new JButton("Atras");
			btAtras.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					if(productoSeleccionado>0)
					{
						productoSeleccionado--;
					}
					cargarInformacionProducto();
					
					cargarBotones();
				}
			});
			btAtras.setEnabled(true);
		}
		return btAtras;
	}
	private JPanel getPanel_1() {
		if (panel_1 == null) {
			panel_1 = new JPanel();
			FlowLayout flowLayout = (FlowLayout) panel_1.getLayout();
			flowLayout.setAlignment(FlowLayout.RIGHT);
			panel_1.add(getButton_2());
		}
		return panel_1;
	}
	private JButton getButton_2() {
		if (button_2 == null) {
			button_2 = new JButton("Volver");
			button_2.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					((CardLayout)panel_Pestañas.getLayout()).show(panel_Pestañas, "Productos");
					lb_Información.setText("Selecciona los productos que deseas recoger");
					
					productoSeleccionado = 0;
					listaProductosSeleccionados = null;
				}
			});
		}
		return button_2;
	}
	private JLabel getLbNombreInf() {
		if (lbNombreInf == null) {
			lbNombreInf = new JLabel("<dynamic>");
			lbNombreInf.setHorizontalAlignment(SwingConstants.CENTER);
			lbNombreInf.setFont(new Font("Times New Roman", Font.PLAIN, 20));
		}
		return lbNombreInf;
	}
	private JPanel getPanel_2() {
		if (panel_2 == null) {
			panel_2 = new JPanel();
			panel_2.add(getBtRecogido());
		}
		return panel_2;
	}
	private JButton getBtRecogido() {
		if (btRecogido == null) {
			btRecogido = new JButton("Producto Recogido");
			btRecogido.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					MarcarDatoLista(listaProductosSeleccionados.get(productoSeleccionado));
					
					if(listaProductosSeleccionados.get(productoSeleccionado).getEstado_producto()==Producto.RECOGIDO)
					{
						btRecogido.setEnabled(false);
						btRecogido.setText("Ya Recogido");
					}
					else{
						btRecogido.setEnabled(true);
						btRecogido.setText("Producto Recogido");
					}
				}
			});
		}
		return btRecogido;
	}
	private JScrollPane getScrollPane() {
		if (scrollPane == null) {
			scrollPane = new JScrollPane();
			scrollPane.setViewportView(getPanel_3());
		}
		return scrollPane;
	}
	private JPanel getPanel_3() {
		if (panel_3 == null) {
			panel_3 = new JPanel();
			panel_3.setLayout(new GridLayout(0, 2, 0, 0));
			panel_3.add(getLbIDPed());
			panel_3.add(getLbIDPedInf());
			panel_3.add(getLbNombreProducto());
			panel_3.add(getLbNombreProductoInf());
			panel_3.add(getLbCodigo());
			panel_3.add(getLbCodigoInf());
			panel_3.add(getLbPasillo());
			panel_3.add(getLbPasilloInf());
			panel_3.add(getLbEstanteria());
			panel_3.add(getLbEstanteriaInf());
			panel_3.add(getLbAltura());
			panel_3.add(getLbAlturaInf());
			panel_3.add(getLbDimensiones());
			panel_3.add(getLbDimensionesInf());
			panel_3.add(getLbPeso());
			panel_3.add(getLbPesoInf());
		}
		return panel_3;
	}
	private JLabel getLbIDPed() {
		if (lbIDPed == null) {
			lbIDPed = new JLabel("ID Pedido:");
		}
		return lbIDPed;
	}
	private JLabel getLbIDPedInf() {
		if (lbIDPedInf == null) {
			lbIDPedInf = new JLabel();
			lbIDPedInf.setText("0");
		}
		return lbIDPedInf;
	}
	private JLabel getLbCodigo() {
		if (lbCodigo == null) {
			lbCodigo = new JLabel("C\u00F3digo Producto:");
		}
		return lbCodigo;
	}
	private JLabel getLbCodigoInf() {
		if (lbCodigoInf == null) {
			lbCodigoInf = new JLabel("<dynamic>");
		}
		return lbCodigoInf;
	}
	private JLabel getLbPasillo() {
		if (lbPasillo == null) {
			lbPasillo = new JLabel("Pasillo Producto:");
		}
		return lbPasillo;
	}
	private JLabel getLbPasilloInf() {
		if (lbPasilloInf == null) {
			lbPasilloInf = new JLabel("<dynamic>");
		}
		return lbPasilloInf;
	}
	private JLabel getLbEstanteria() {
		if (lbEstanteria == null) {
			lbEstanteria = new JLabel("Estanter\u00EDa Producto:");
		}
		return lbEstanteria;
	}
	private JLabel getLbEstanteriaInf() {
		if (lbEstanteriaInf == null) {
			lbEstanteriaInf = new JLabel("<dynamic>");
		}
		return lbEstanteriaInf;
	}
	private JLabel getLbAltura() {
		if (lbAltura == null) {
			lbAltura = new JLabel("Altura Producto:");
		}
		return lbAltura;
	}
	private JLabel getLbAlturaInf() {
		if (lbAlturaInf == null) {
			lbAlturaInf = new JLabel("<dynamic>");
		}
		return lbAlturaInf;
	}
	private JLabel getLbDimensiones() {
		if (lbDimensiones == null) {
			lbDimensiones = new JLabel("Dimensiones:");
		}
		return lbDimensiones;
	}
	private JLabel getLbDimensionesInf() {
		if (lbDimensionesInf == null) {
			lbDimensionesInf = new JLabel("0m x 0m x 0m");
		}
		return lbDimensionesInf;
	}
	private JLabel getLbPeso() {
		if (lbPeso == null) {
			lbPeso = new JLabel("Peso:");
		}
		return lbPeso;
	}
	private JLabel getLbPesoInf() {
		if (lbPesoInf == null) {
			lbPesoInf = new JLabel("0 kg");
		}
		return lbPesoInf;
	}
	
	private void cargarInformacionProducto()
	{
		lbNombreInf.setText("Producto "+ (productoSeleccionado+1) + " de " + listaProductosSeleccionados.size());
		
		lbNombreProductoInf.setText(""+listaProductosSeleccionados.get(productoSeleccionado).getOrder_product_name());
		lbIDPedInf.setText(""+listaProductosSeleccionados.get(productoSeleccionado).getOrder_id());
		lbCodigoInf.setText(""+listaProductosSeleccionados.get(productoSeleccionado).getOrder_product_code());
		lbPasilloInf.setText(""+listaProductosSeleccionados.get(productoSeleccionado).getLocation().split("-")[0]);
		lbEstanteriaInf.setText(""+listaProductosSeleccionados.get(productoSeleccionado).getLocation().split("-")[1]);
		lbAlturaInf.setText(""+listaProductosSeleccionados.get(productoSeleccionado).getLocation().split("-")[2]);
		lbDimensionesInf.setText(""+listaProductosSeleccionados.get(productoSeleccionado).getAncho() + "m x " +
				listaProductosSeleccionados.get(productoSeleccionado).getAlto() + "m x " +
				listaProductosSeleccionados.get(productoSeleccionado).getLargo() + "m");
		lbPesoInf.setText(""+listaProductosSeleccionados.get(productoSeleccionado).getPeso()+" kg");
		
		if(listaProductosSeleccionados.get(productoSeleccionado).getEstado_producto()==Producto.RECOGIDO)
		{
			btRecogido.setEnabled(false);
			btRecogido.setText("Ya Recogido");
		}
		else{
			btRecogido.setEnabled(true);
			btRecogido.setText("Producto Recogido");
		}
	}
	
	private void cargarBotones()
	{
		btSiguiente.setEnabled(true);
		btAtras.setEnabled(true);
		
		if(productoSeleccionado == 0)
		{
			btSiguiente.setEnabled(true);
			btAtras.setEnabled(false);
		}
		if(productoSeleccionado == (listaProductosSeleccionados.size()-1)){
			btSiguiente.setEnabled(false);
			btAtras.setEnabled(true);
		}
		
		if(productoSeleccionado == (listaProductosSeleccionados.size()-1) && productoSeleccionado == 0){
			btSiguiente.setEnabled(false);
			btAtras.setEnabled(false);
		}
		
		if(listaProductosSeleccionados.get(productoSeleccionado).getEstado_producto()==Producto.RECOGIDO)
		{
			btRecogido.setEnabled(false);
			btRecogido.setText("Ya Recogido");
		}
		else{
			btRecogido.setEnabled(true);
			btRecogido.setText("Producto Recogido");
		}
	}
	
	private JLabel getLbNombreProducto() {
		if (lbNombreProducto == null) {
			lbNombreProducto = new JLabel("Nombre producto:");
		}
		return lbNombreProducto;
	}
	private JLabel getLbNombreProductoInf() {
		if (lbNombreProductoInf == null) {
			lbNombreProductoInf = new JLabel("");
		}
		return lbNombreProductoInf;
	}
	private JPanel getPanel_Ampliar_Fragmentar() {
		if (panel_Ampliar_Fragmentar == null) {
			panel_Ampliar_Fragmentar = new JPanel();
			panel_Ampliar_Fragmentar.setLayout(new BorderLayout(0, 0));
			panel_Ampliar_Fragmentar.add(getPanel_botones_Frag_Ampl(), BorderLayout.SOUTH);
			panel_Ampliar_Fragmentar.add(getPanel_Mensaje_Frag_Ampl(), BorderLayout.CENTER);
		}
		return panel_Ampliar_Fragmentar;
	}
	private JPanel getPanel_botones_Frag_Ampl() {
		if (panel_botones_Frag_Ampl == null) {
			panel_botones_Frag_Ampl = new JPanel();
			panel_botones_Frag_Ampl.add(getBt_Si());
			panel_botones_Frag_Ampl.add(getBt_No());
		}
		return panel_botones_Frag_Ampl;
	}
	private JButton getBt_Si() {
		if (bt_Si == null) {
			bt_Si = new JButton("Si");
			bt_Si.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					if(pesoTotalPedSeleccionados > Producto.PESO_GRANDE)
					{
						for(int i = 0 ; i<modeloListaProductos.getSize();i++)
						{
							if(pesoTotalPedSeleccionados > Producto.PESO_GRANDE)
							{
								pesoTotalPedSeleccionados = pesoTotalPedSeleccionados - modeloListaProductos.get(i).getPeso();
								modeloListaProductos.remove(i);
								
							}
						}
						
						((CardLayout)panel_Pestañas.getLayout()).show(panel_Pestañas, "Productos");
						
						lb_Información.setText("Selecciona los productos que deseas recoger");
						
						
					}
					if(pesoTotalPedSeleccionados < Producto.PESO_PEQUEÑO)
					{
						for(int i = 0 ; i<modeloListaPedidos.getSize();i++)
						{
							Pedido p = modeloListaPedidos.get(i);
							if(p.getProductos().get(0).getOrder_id() != modeloListaProductos.get(0).getOrder_id())
								for(int j = 0 ; j<p.getProductos().size();j++)
								{
									if(pesoTotalPedSeleccionados < Producto.PESO_PEQUEÑO)
									{
										modeloListaProductos.addElement(p.getProductos().get(j));
										pesoTotalPedSeleccionados = pesoTotalPedSeleccionados + p.getProductos().get(j).getPeso();
									}
								}
						}
						
						((CardLayout)panel_Pestañas.getLayout()).show(panel_Pestañas, "Productos");
						
						lb_Información.setText("Selecciona los productos que deseas recoger");
						
						
					}
				}
			});
		}
		return bt_Si;
	}
	private JButton getBt_No() {
		if (bt_No == null) {
			bt_No = new JButton("No");
			bt_No.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					((CardLayout)panel_Pestañas.getLayout()).show(panel_Pestañas, "Productos");
					lb_Información.setText("Selecciona los productos que deseas recoger");
					
				}
			});
		}
		return bt_No;
	}
	private JPanel getPanel_Mensaje_Frag_Ampl() {
		if (panel_Mensaje_Frag_Ampl == null) {
			panel_Mensaje_Frag_Ampl = new JPanel();
			panel_Mensaje_Frag_Ampl.setLayout(new BorderLayout(0, 0));
			panel_Mensaje_Frag_Ampl.add(getPanelScroll_Mensaje_Ampl_Frag(), BorderLayout.CENTER);
		}
		return panel_Mensaje_Frag_Ampl;
	}
	private JScrollPane getPanelScroll_Mensaje_Ampl_Frag() {
		if (panelScroll_Mensaje_Ampl_Frag == null) {
			panelScroll_Mensaje_Ampl_Frag = new JScrollPane();
			panelScroll_Mensaje_Ampl_Frag.setViewportView(getTxArea_Mensaje_Frag_Ampl());
		}
		return panelScroll_Mensaje_Ampl_Frag;
	}
	private JTextArea getTxArea_Mensaje_Frag_Ampl() {
		if (txArea_Mensaje_Frag_Ampl == null) {
			txArea_Mensaje_Frag_Ampl = new JTextArea();
			txArea_Mensaje_Frag_Ampl.setFont(new Font("Monospaced", Font.PLAIN, 11));
			txArea_Mensaje_Frag_Ampl.setEditable(false);
			txArea_Mensaje_Frag_Ampl.setWrapStyleWord(true);
			txArea_Mensaje_Frag_Ampl.setLineWrap(true);
		}
		return txArea_Mensaje_Frag_Ampl;
	}
	private JButton getBtnSeleccionarTodo() {
		if (btnSeleccionarTodo == null) {
			btnSeleccionarTodo = new JButton("Seleccionar todo");
			btnSeleccionarTodo.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					int[] a = new int[modeloListaProductos.getSize()];
					for (int i = 0; i < modeloListaProductos.getSize(); i++) {
						a[i]=i;
					}
					
					list_Productos.setSelectedIndices(a);
				}
			});
		}
		return btnSeleccionarTodo;
	}

	
	
	private JTable getTabla_Pedidos() {
		if (tabla_Pedidos == null) {
			String[] nombreColumnas = {"ID","Bultos", "Fecha"};
			modeloTabla = new ModeloNoEditable(nombreColumnas, 0);
			modeloOrdenado = new TableRowSorter<ModeloNoEditable>(modeloTabla);
			
			tabla_Pedidos = new JTable(modeloTabla);
			
			tabla_Pedidos.setRowSorter(modeloOrdenado);
			tabla_Pedidos.getRowSorter().toggleSortOrder(2);
			tabla_Pedidos.getRowSorter().toggleSortOrder(2);
			
			tabla_Pedidos.addMouseListener(new MouseAdapter() {
				@Override
				public void mouseReleased(MouseEvent e) {
					if(tabla_Pedidos.getSelectedRow()!=-1){
						bt_Continuar.setEnabled(true);
						btAtras.setEnabled(false);
						//cargarDatosProductos(tabla_Pedidos.getSelectedRow());
					}
				}
			});
			ajustarAnchoColumnas();
			tabla_Pedidos.setRowHeight(20);
			tabla_Pedidos.getTableHeader().setReorderingAllowed(false);
		}
		return tabla_Pedidos;
	}

	private void ajustarAnchoColumnas() {
		int[] anchos = {50, 50, 50};
		for(int i = 0; i < tabla_Pedidos.getColumnCount(); i++)
			tabla_Pedidos.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
	}
	
	private void añadirDatosTablaPedidos()
	{
		modeloTabla.getDataVector().clear();
		modeloTabla.fireTableDataChanged();
		Object[] nuevaFila = new Object[3];
		for(int i=0 ; i < modeloListaPedidos.getSize() ; i++){
			nuevaFila[0] = modeloListaPedidos.get(i).getId();
			nuevaFila[1] = modeloListaPedidos.get(i).getProductos().size();
			nuevaFila[2] = modeloListaPedidos.get(i).getProductos().get(0).getFecha();
			modeloTabla.addRow(nuevaFila);
		}
	}
	
	private void añadirDatosTablaProductos()
	{
		modeloTabla.getDataVector().clear();
		modeloTabla.fireTableDataChanged();
		Object[] nuevaFila = new Object[3];
		for(int i=0 ; i < modeloListaPedidos.getSize() ; i++){
			nuevaFila[0] = modeloListaProductos.get(i).getOrder_product_name();
			nuevaFila[1] = modeloListaProductos.get(i).getCantidadTotalEnPedido();
			nuevaFila[2] = modeloListaProductos.get(i).getLocation();
			modeloTabla.addRow(nuevaFila);
		}
	}
	private JScrollPane getPanel_scroll_Productos() {
		if (panel_scroll_Productos == null) {
			panel_scroll_Productos = new JScrollPane();
			panel_scroll_Productos.setViewportView(getTabla_productos());
		}
		return panel_scroll_Productos;
	}
	private JTable getTabla_productos() {
		if (tabla_productos == null) {
			
			String[] nombreColumnas = {"nombre","cantidad", "ubicacion"};
			modeloTabla = new ModeloNoEditable(nombreColumnas, 0);
			modeloOrdenado = new TableRowSorter<ModeloNoEditable>(modeloTabla);
			tabla_productos = new JTable();
			
			tabla_productos.setRowSorter(modeloOrdenado);
			//tabla_productos.getRowSorter().toggleSortOrder(2);
			//tabla_productos.getRowSorter().toggleSortOrder(2);
			
			
			//ajustarAnchoColumnas();
			tabla_productos.setRowHeight(20);
			tabla_productos.getTableHeader().setReorderingAllowed(false);
			
		}
		return tabla_productos;
	}
}
